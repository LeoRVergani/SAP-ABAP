*&---------------------------------------------------------------------*
*& Report ZCEB_CRUD_COMPLETO
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZCEB_CRUD_COMPLETO.

DATA LV_DYNNR TYPE DYNNR.

DATA: LT_PRODUTO TYPE TABLE OF ZCEB_TB_PRODUTOS,
            LS_PRODUT  TYPE ZCEB_TB_PRODUTOS,
            LT_CLIENTE TYPE  TABLE OF ZCEB_TAB_CLIENTE,
            LS_CLIENTE TYPE ZCEB_TAB_CLIENTE.


SELECTION-SCREEN BEGIN OF SCREEN 101 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-001.
PARAMETERS B_ADD AS CHECKBOX.
SELECTION-SCREEN SKIP 1.

PARAMETERS: P_COD_P TYPE ZCEB_TB_PRODUTOS-COD_DO_PRODUTO,
            P_NOME  TYPE ZCEB_TB_PRODUTOS-NOME_DO_PRODUTO,
            P_CATG  TYPE ZCEB_TB_PRODUTOS-CATEGORIA,
            P_PRECO TYPE ZCEB_TB_PRODUTOS-PRECO.

SELECTION-SCREEN END OF BLOCK B1.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-002.
PARAMETERS B_ATU AS CHECKBOX.
SELECTION-SCREEN SKIP 1.

PARAMETERS: P_COD_A TYPE ZCEB_TB_PRODUTOS-COD_DO_PRODUTO,
            P_PRE_A TYPE ZCEB_TB_PRODUTOS-PRECO.

SELECTION-SCREEN END OF BLOCK B2.


SELECTION-SCREEN BEGIN OF BLOCK B3 WITH FRAME TITLE TEXT-003.
PARAMETERS B_DEL AS CHECKBOX.
SELECTION-SCREEN SKIP 1.

PARAMETERS: P_COD_D TYPE ZCEB_TB_PRODUTOS-COD_DO_PRODUTO.

SELECTION-SCREEN SKIP 2.

PARAMETERS B_MOSTRA AS CHECKBOX.

SELECTION-SCREEN END OF BLOCK B3.
SELECTION-SCREEN END OF SCREEN 101.


SELECTION-SCREEN BEGIN OF SCREEN 102 AS SUBSCREEN.
SELECTION-SCREEN BEGIN OF BLOCK B4 WITH FRAME TITLE TEXT-004.
PARAMETERS P_ADDC AS CHECKBOX.

SELECTION-SCREEN SKIP 1.

PARAMETERS: P_ID_C  TYPE ZCEB_TAB_CLIENTE-ID_CLIENTE,
            P_NOMEC TYPE ZCEB_TAB_CLIENTE-NOME_CLIENTE,
            P_EMAIL TYPE ZCEB_TAB_CLIENTE-EMAIL,
            P_DATA  TYPE ZCEB_TAB_CLIENTE-DATA_CAD.
SELECTION-SCREEN END OF BLOCK B4.

SELECTION-SCREEN BEGIN OF BLOCK B5 WITH FRAME TITLE TEXT-005.
PARAMETERS P_ATUC AS CHECKBOX.

SELECTION-SCREEN SKIP 1.

PARAMETERS: P_ID_A  TYPE ZCEB_TAB_CLIENTE-ID_CLIENTE,
            P_EML_A TYPE ZCEB_TAB_CLIENTE-EMAIL.

SELECTION-SCREEN END OF BLOCK B5.


SELECTION-SCREEN BEGIN OF BLOCK B6 WITH FRAME TITLE TEXT-006.
PARAMETERS P_DELC AS CHECKBOX.

SELECTION-SCREEN SKIP 1.

PARAMETERS: P_ID_D   TYPE ZCEB_TAB_CLIENTE-ID_CLIENTE.

SELECTION-SCREEN SKIP 2.

PARAMETERS P_MOSTC AS CHECKBOX.
SELECTION-SCREEN END OF BLOCK B6.
SELECTION-SCREEN END OF SCREEN 102.


SELECTION-SCREEN BEGIN OF TABBED BLOCK T1 FOR 25 LINES.
SELECTION-SCREEN TAB (25) TAB1 USER-COMMAND USRCMD1 DEFAULT SCREEN 101.
SELECTION-SCREEN TAB (25) TAB2 USER-COMMAND USRCMD2 DEFAULT SCREEN 102.
SELECTION-SCREEN END OF BLOCK T1.

PERFORM P_TELA.

INITIALIZATION.
  TAB1 = 'PRODUTO'.
  TAB2 = 'CLIENTE'.

FORM P_TELA.
  LV_DYNNR = T1-DYNNR.

  CASE LV_DYNNR.
    WHEN '0101'.
      IF B_ADD EQ ABAP_TRUE AND P_COD_P IS NOT INITIAL. "VALIDA OPC ADD DADOS

        SELECT SINGLE *
            FROM ZCEB_TB_PRODUTOS
            INTO LS_PRODUT
            WHERE COD_DO_PRODUTO  EQ P_COD_P
              AND NOME_DO_PRODUTO EQ P_NOME
              AND CATEGORIA       EQ P_CATG
              AND PRECO           EQ P_PRECO.

        IF LS_PRODUT IS INITIAL.  "VALIDA SE JA EXISTE O DADO NA TABELA
          LS_PRODUT-COD_DO_PRODUTO   = P_COD_P.
          LS_PRODUT-NOME_DO_PRODUTO  = P_NOME.
          LS_PRODUT-CATEGORIA        = P_CATG.
          LS_PRODUT-PRECO            = P_PRECO.

          INSERT INTO ZCEB_TB_PRODUTOS VALUES LS_PRODUT.

          IF SY-SUBRC EQ 0. "VERIFICA SE O COMANDO FOI EXECUTA CORRETAMENTE
            COMMIT WORK.
            WRITE |PRODUTO { LS_PRODUT-NOME_DO_PRODUTO } ADICIONADO A TABELA|.
            CLEAR LS_PRODUT.
          ENDIF.
        ENDIF.

      ELSEIF B_ADD EQ ABAP_TRUE AND P_COD_D IS INITIAL.
        MESSAGE 'INFORME O CODIGO DO PRODUTO' TYPE 'E'.

      ENDIF.

      IF B_ATU EQ ABAP_TRUE AND P_COD_A IS NOT INITIAL ."VERIFICA SE OPC ATUALIZAR ESTÁ MARCADO
        SELECT SINGLE *
           FROM ZCEB_TB_PRODUTOS
           INTO LS_PRODUT
           WHERE COD_DO_PRODUTO  EQ P_COD_A.

        IF LS_PRODUT IS NOT INITIAL. "VERIFICANDO SE O REGISTRO FOI ENCONTRADO PARA SER ATUALIZADO
          UPDATE ZCEB_TB_PRODUTOS    "ATUALIZA OS DADOS
            SET PRECO = P_PRE_A
            WHERE COD_DO_PRODUTO EQ LS_PRODUT-COD_DO_PRODUTO.

          IF SY-SUBRC EQ 0 . "VERIFICA SE O COMANDO FOI EXECUTADO CORRETAMENTE
            COMMIT WORK.  "CONFIRMA A ATUALIZAÇÃO NA TABELA
            WRITE |PRODUTO { LS_PRODUT-NOME_DO_PRODUTO } TEVE O PRECO ATUALIZADO PARA { P_PRE_A } |.
            CLEAR LS_PRODUT.
          ENDIF.

        ELSE.
          WRITE |DADOS NÃO ENCONTRADOS|.
        ENDIF.


      ELSEIF B_ATU EQ ABAP_TRUE AND P_COD_D IS INITIAL.
        MESSAGE 'INFORME O CODIGO DO PRODUTO' TYPE 'E'.
      ENDIF.


      IF B_DEL EQ ABAP_TRUE AND P_COD_D IS NOT INITIAL . "VALIDA SE A OPC DEL ESTA MARCADA'
        SELECT SINGLE *                                   "BUSCA DADOS NA TABELA COM O COD PASSADO NA TELA
           FROM ZCEB_TB_PRODUTOS
           INTO LS_PRODUT
           WHERE COD_DO_PRODUTO  EQ P_COD_D.

        IF LS_PRODUT IS NOT INITIAL.  "VERIFICAR SE ACHOU O DADO NA TABELA
          DELETE FROM ZCEB_TB_PRODUTOS                                "DELETANDO DADO DA TABELA
            WHERE COD_DO_PRODUTO EQ LS_PRODUT-COD_DO_PRODUTO.

          IF SY-SUBRC EQ 0. "VERIFICA SE FOI EXECUTADO CORRETAMENTE
            COMMIT WORK. "DELETA CONFIRMA QUE O DADO SERA DELETADO
            WRITE |O PRODUTO { LS_PRODUT-NOME_DO_PRODUTO } FOI DELETADO |.
            CLEAR LS_PRODUT. " LIMPAR A MINHA ESTRUTURA
          ENDIF.
        ENDIF.

      ELSEIF B_DEL EQ ABAP_TRUE AND P_COD_D IS INITIAL.
        MESSAGE 'INFORME O CODIGO DO PRODUTO' TYPE 'E'.
      ENDIF.

      IF B_MOSTRA EQ ABAP_TRUE. "VERIFICA SE A OPC DE MOSTRAR DADOS ESTA MARCADA
        SELECT *                "BUSCA TODOS OS DADOS DA TABELA
           FROM ZCEB_TB_PRODUTOS
           INTO TABLE LT_PRODUTO.

        IF LT_PRODUTO IS  NOT INITIAL.  "VERIFICANDO SE A TABELA NÃO ESTA VAZIA OU SEJA FORAM ENCONTRADOS DADOS
          LOOP AT LT_PRODUTO INTO LS_PRODUT.
            WRITE / |COD PRODUTO { LS_PRODUT-COD_DO_PRODUTO } NOME { LS_PRODUT-NOME_DO_PRODUTO }  CATEGORIA { LS_PRODUT-CATEGORIA } PRECO { LS_PRODUT-PRECO }|.
            ULINE.
          ENDLOOP.
        ENDIF.
      ENDIF.
    WHEN '0102'.
      IF P_ADDC EQ ABAP_TRUE AND P_ID_C IS NOT INITIAL. "VALIDANDO A OPC DE ADD CLIENTE E O ID NÃO ESTA VAZIO
        SELECT SINGLE *     "BUSCANDO DADOS DA TABELA COM OS CAMPOS DA TELA
            FROM ZCEB_TAB_CLIENTE
            INTO LS_CLIENTE
            WHERE ID_CLIENTE         EQ P_ID_C
              AND NOME_CLIENTE       EQ P_NOMEC
              AND EMAIL              EQ P_EMAIL
              AND DATA_CAD           EQ P_DATA.


        IF LS_CLIENTE IS  INITIAL . "VERIFICO SE ENCONTROU DADOS
          LS_CLIENTE-ID_CLIENTE = P_ID_C.
          LS_CLIENTE-NOME_CLIENTE = P_NOMEC.
          LS_CLIENTE-EMAIL = P_EMAIL.
          LS_CLIENTE-DATA_CAD = P_DATA.

          INSERT INTO ZCEB_TAB_CLIENTE VALUES LS_CLIENTE. "ADICONANDO DADOS NO BANCO

          IF SY-SUBRC EQ 0. "VALIDA SE DEU CERTO
            COMMIT WORK.
            WRITE |O CLIENTE { LS_CLIENTE-NOME_CLIENTE } FOI ADICIONADO A TABELA|.
            CLEAR LS_CLIENTE.
          ENDIF.

        ENDIF.
      ENDIF.

      IF P_ATUC EQ ABAP_TRUE AND P_ID_A IS NOT INITIAL. "VALIDANDO OPC DE ATUALIZAR E CAMPO ID
        SELECT SINGLE *  "BUSCANDO DADOS DA TABELA
          FROM ZCEB_TAB_CLIENTE
          INTO LS_CLIENTE
          WHERE ID_CLIENTE EQ P_ID_A.

        IF LS_CLIENTE IS NOT INITIAL.  "VERIFICANDO SE ACHOU OS DADOS
          UPDATE ZCEB_TAB_CLIENTE     "ATUALIZANDO O EMAIL COM O VALOR DA TELA
            SET  EMAIL = P_EML_A
            WHERE ID_CLIENTE EQ LS_CLIENTE-ID_CLIENTE.

          IF SY-SUBRC EQ 0.
            COMMIT WORK.  "CONFIRMA QUE O DADO FOI ATUALIZADO NA TABELA
            WRITE |O EMAIL DO CLIENTE { LS_CLIENTE-NOME_CLIENTE } AGORA É { P_EML_A }|.
            CLEAR LS_CLIENTE. "LIMPA ESTRUTURA PARA EVITAR ERRO
          ENDIF.
        ENDIF.

      ENDIF.

*      IF P_DELC EQ ABAP_TRUE AND P_ID_D IS NOT INITIAL . " VALIDANDO OPC DEL E ID CLIENTE
*        SELECT SINGLE *   "BUSCANDO DADOS COMPARANDO COM ID DA TELA
*          FROM ZCEB_TAB_CLIENTE
*          INTO LS_CLIENTE
*          WHERE ID_CLIENTE EQ P_ID_D.
*
*        IF LS_CLIENTE IS NOT INITIAL. "VALIDA SE ENCONTROU DADOS
*          DELETE FROM ZCEB_TAB_CLIENTE  "DELETANDO DADO DA TABELA
*              WHERE ID_CLIENTE EQ LS_CLIENTE-ID_CLIENTE.
*
*          IF SY-SUBRC EQ 0.
*            COMMIT WORK. "CONFIRMA O DELETE NA TABELA
*            WRITE |CLIENTE { LS_CLIENTE-NOME_CLIENTE } APAGADO TA TABELA|.
*            CLEAR LS_CLIENTE.
*          ENDIF.
*        ENDIF.
*      ENDIF.

        IF P_DELC EQ ABAP_TRUE.

        SELECT *
          FROM ZCEB_TAB_CLIENTE
          INTO TABLE LT_CLIENTE.


          SORT LT_CLIENTE BY DATA_CAD DESCENDING. "ORDENANDO MINHA TABELA PELA DATA DE FORMA DEC
            READ TABLE LT_CLIENTE INTO LS_CLIENTE INDEX 1. "JOGANDO A 1 LINHA NA ESTRUTURA

              IF SY-SUBRC EQ 0.
                  DELETE FROM ZCEB_TAB_CLIENTE "DELETAR O VALOR ENCONTRADO
                    WHERE ID_CLIENTE EQ LS_CLIENTE-ID_CLIENTE.
              ENDIF.
        ENDIF.


      IF P_MOSTC EQ ABAP_TRUE. "VERIFICA OPC MOSTRAR CLIENTES
        SELECT *
          FROM ZCEB_TAB_CLIENTE
          INTO TABLE LT_CLIENTE.

        IF LT_CLIENTE IS NOT INITIAL. "VALIDANDO SE ENCONTROU DADOS
          LOOP AT LT_CLIENTE INTO LS_CLIENTE.
            WRITE: / |ID CLI { LS_CLIENTE-ID_CLIENTE }  NOME { LS_CLIENTE-NOME_CLIENTE } EMAIL { LS_CLIENTE-EMAIL } DATA CAD { LS_CLIENTE-DATA_CAD } |.
            CLEAR LS_CLIENTE.

          ENDLOOP.
        ENDIF.
      ENDIF.

    WHEN OTHERS.
  ENDCASE.
ENDFORM.